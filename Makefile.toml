[env]
PROJECT_NAME = '${CARGO_MAKE_CRATE_FS_NAME}'
WINDOWS_TARGET = 'x86_64-pc-windows-msvc'
LINUX_WINDOWS_CC_TARGET = 'x86_64-pc-windows-gnu' # for compiling for windows on linux
WINDOWS_EXE_NAME = '${PROJECT_NAME}-game.exe' # Should match whatever is set in Cargo.toml
LINUX_TARGET = 'x86_64-unknown-linux-gnu'
LINUX_EXE_NAME = '${PROJECT_NAME}-game'

[tasks.prepare-release-dir]
condition = { env_set = ['PLATFORM'] }
script_runner = '@duckscript'
script = '''
rm -r release/${PLATFORM}
mkdir release/${PLATFORM}
mkdir release/${PLATFORM}/assets
'''



[tasks.copy_assets]
condition = { env_set = ['PLATFORM'] }
script_runner = "@shell"
script = '''
cp assets/game/embedded/* release/${PLATFORM}/assets/ -r
'''
[tasks.copy_assets_linux]
env = { 'PLATFORM' = 'linux' }
run_task = 'copy_assets'

[tasks.copy_assets_windows]
env = { 'PLATFORM' = 'windows' }
run_task = 'copy_assets'

[tasks.zip-platform]
condition = { env_set = ['PLATFORM'] }
# TODO: Use something more lightweight here to zip the files
script_runner = '@rust'
script = '''
//! ```cargo
//! [dependencies]
//! zip = "0.5"
//! walkdir = "2.3"
//! envmnt = "0.9"
//! ```

use std::io::prelude::*;
use std::io::{ Seek, Write };
use walkdir::{ DirEntry, WalkDir };
use std::path::{ Path, PathBuf };
use zip::write::FileOptions;
use std::fs::File;

fn main() {
    let platform = envmnt::get_or_panic("PLATFORM");
    let project_name = envmnt::get_or_panic("PROJECT_NAME");

    let src_dir = format!("release/{}", platform);
    println!("Package src dir: {:?}", &src_dir);

    let out_path = PathBuf::from(format!("release/{}-{}.zip", project_name, platform));
    let out_file = File::create(&out_path).unwrap();

    let walkdir = WalkDir::new(&src_dir);
    let iter = walkdir.into_iter();
    zip_dir(&mut iter.filter_map(|e| e.ok()), &src_dir, out_file, zip::CompressionMethod::Deflated).unwrap();
}

fn zip_dir<T>(
    it: &mut dyn Iterator<Item = DirEntry>,
    prefix: &str,
    writer: T,
    method: zip::CompressionMethod,
) -> zip::result::ZipResult<()>
where
    T: Write + Seek,
{
    let mut zip = zip::ZipWriter::new(writer);
    let options = FileOptions::default()
        .compression_method(method)
        .unix_permissions(0o755);

    let mut buffer = Vec::new();
    for entry in it {
        let path = entry.path();
        let name = path.strip_prefix(Path::new(prefix)).unwrap();

        // Write file or directory explicitly
        // Some unzip tools unzip files with directory paths correctly, some do not!
        if path.is_file() {
            println!("Adding file {:?} as {:?} ...", path, name);
            #[allow(deprecated)]
            zip.start_file_from_path(name, options)?;
            let mut f = File::open(path)?;

            f.read_to_end(&mut buffer)?;
            zip.write_all(&*buffer)?;
            buffer.clear();
        } else if name.as_os_str().len() != 0 {
            // Only if not root! Avoids path spec / warning
            // and mapname conversion failed error on unzip
            println!("Adding dir {:?} as {:?} ...", path, name);
            #[allow(deprecated)]
            zip.add_directory_from_path(name, options)?;
        }
    }
    zip.finish()?;
    Result::Ok(())
}
'''

[tasks.prepare-release-dir-web]
env = { 'PLATFORM' = 'web' }
run_task = 'prepare-release-dir'

[tasks.compile-web]
command = 'wasm-pack'
args = ['build', '--target', 'web']
install_crate = { crate_name = 'wasm-pack', test_arg = '--help' }

[tasks.distrib-web]
env = { 'PLATFORM' = 'web' }
script_runner = '@duckscript'
dependencies = ['prepare-release-dir-web', 'compile-web','copy_assets']
script = '''
cp pkg/${PROJECT_NAME}_bg.wasm release/${PLATFORM}/${PROJECT_NAME}.wasm
cp pkg/${PROJECT_NAME}.js release/${PLATFORM}/${PROJECT_NAME}.js

wasm_file_size = filesize release/${PLATFORM}/${PROJECT_NAME}.wasm

index_html = readfile web/index.html
index_html = replace ${index_html} "<!<!PROJECT_NAME!>!>" ${PROJECT_NAME}
index_html = replace ${index_html} "<!<!WASM_FILE_SIZE!>!>" ${wasm_file_size}
writefile release/${PLATFORM}/index.html ${index_html}
'''

[tasks.zip-web]
env = { 'PLATFORM' = 'web' }
dependencies = ['distrib-web']
run_task = 'zip-platform'

[tasks.publish-web]
env = { 'PLATFORM' = 'web' }
dependencies = ['distrib-web']
condition = { env_set = ['BUTLER_EXE'] }
script_runner = '@duckscript'
script = '''
exec ${BUTLER_EXE} push release/web ${ITCH_USER}/${ITCH_GAME}:web --userversion ${CARGO_MAKE_PROJECT_VERSION}
'''

[tasks.prepare-release-dir-windows]
env = { 'PLATFORM' = 'windows' }
run_task = 'prepare-release-dir'

[tasks.compile-windows]
command = 'cargo'
args = ['build', '--release', '--target', '${WINDOWS_TARGET}']

[tasks.compile-linux2windows]
command = 'cargo'
args = ['build', '--release', '--target', '${LINUX_WINDOWS_CC_TARGET}']


[tasks.distrib-windows]
env = { 'PLATFORM' = 'windows' }
dependencies = ['prepare-release-dir-windows', 'compile-windows','copy_assets_windows']
script_runner = '@duckscript'
script = '''
cp target/${WINDOWS_TARGET}/release/${WINDOWS_EXE_NAME} release/${PLATFORM}/${WINDOWS_EXE_NAME}
'''
[tasks.distrib-linux2windows]
env = { 'PLATFORM' = 'windows' }
dependencies = ['prepare-release-dir-windows', 'compile-linux2windows','copy_assets_windows']
script_runner = '@duckscript'
script = '''
cp target/${LINUX_WINDOWS_CC_TARGET}/release/${WINDOWS_EXE_NAME} release/${PLATFORM}/${WINDOWS_EXE_NAME}
'''

[tasks.zip-windows]
env = { 'PLATFORM' = 'windows' }
dependencies = ['distrib-windows']
run_task = 'zip-platform'

[tasks.publish-windows]
env = { 'PLATFORM' = 'windows' }
dependencies = ['distrib-windows']
condition = { env_set = ['BUTLER_EXE'] }
script_runner = '@duckscript'
script = '''
exec ${BUTLER_EXE} push release/windows ${ITCH_USER}/${ITCH_GAME}:windows --userversion ${CARGO_MAKE_PROJECT_VERSION}
'''
[tasks.zip-linux2windows]
env = { 'PLATFORM' = 'windows' }
dependencies = ['distrib-linux2windows']
run_task = 'zip-platform'

[tasks.publish-linux2windows]
env = { 'PLATFORM' = 'windows' }
dependencies = ['distrib-linux2windows']
condition = { env_set = ['BUTLER_EXE'] }
script_runner = '@duckscript'
script = '''
exec ${BUTLER_EXE} push release/windows ${ITCH_USER}/${ITCH_GAME}:windows --userversion ${CARGO_MAKE_PROJECT_VERSION}
'''

[tasks.prepare-release-dir-linux]
env = { 'PLATFORM' = 'linux' }
run_task = 'prepare-release-dir'

[tasks.compile-linux]
command = 'cargo'
args = ['build', '--release', '--target', '${LINUX_TARGET}']

[tasks.distrib-linux]
env = { 'PLATFORM' = 'linux' }
dependencies = ['prepare-release-dir-linux', 'compile-linux', 'copy_assets_linux']
script_runner = '@duckscript'
script = '''
cp target/${LINUX_TARGET}/release/${LINUX_EXE_NAME} release/${PLATFORM}/${LINUX_EXE_NAME}
'''
[tasks.run-linux]
condition = { env_set = ['PLATFORM'] }
dependencies = ['distrib-linux']
script = '''
release/${PLATFORM}/${LINUX_EXE_NAME}
'''
[tasks.run-windows]
condition = { env_set = ['PLATFORM'] }
dependencies = ['distrib-windows']
script = '''
start release/${PLATFORM}/${WINDOWS_EXE_NAME}
'''
[tasks.run-linux2windows]
condition = { env_set = ['PLATFORM'] }
dependencies = ['distrib-linux2windows']
script = '''
wine release/${PLATFORM}/${WINDOWS_EXE_NAME}
'''
[tasks.zip-linux]
env = { 'PLATFORM' = 'linux' }
dependencies = ['distrib-linux']
run_task = 'zip-platform'

[tasks.distrib]
description = 'Builds Web, Windows and Linux versions and places them into the release directory'
run_task = { name = ['distrib-web', 'distrib-windows', 'distrib-linux'] }

[tasks.zip]
description = 'Creates a ZIP archive containing all three builds'
run_task = { name = ['zip-web', 'zip-windows', 'zip-linux'] }

[tasks.publish]
env_files = [ './butler.env' ]
description = 'Publishes both Web and Windows builds of the game on Itch.io using Butler'
clear = true
run_task = { name = ['publish-web', 'publish-windows'] }
